\frametitle{Profiling R code for memory use}

  \begin{itemize}
  \item Measuring memory use in R code is useful either when the code
    takes more memory than is conveniently available or when memory
    allocation and copying of objects is responsible for slow code.

  \item Garbage collection: gc()

\begin{verbatim}
>gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 311043 16.7     597831 32.0   597831 32.0
Vcells 761909  5.9    1445757 11.1  1137162  8.7
\end{verbatim}

  \item \textbf{Vcells} used to store the contents of vectors
  \item \textbf{Ncells} used to store everything else, including all the
    administrative overhead for vectors such as type and length
    information. In fact the vector contents are divided into two
    pools.

\item The sampling profiler Rprof described in the previous section can be given the option
\texttt{memory.profiling=TRUE}.
\begin{verbatim}
Rprof("myprofile.out", memory.profiling=TRUE) # Open the profile log file
##
.... ## Some code you want to profile
##
Rprof(NULL) # Close the profile log

summaryRprof("myprofile.out") # summarize the results

\end{verbatim}

\item Memory profiling requires R to have been compiled with
  \texttt{--enable-memory-profiling}, which is not the default, but is
  currently used for the OS X and Windows binary distributions.

  \end{itemize}

